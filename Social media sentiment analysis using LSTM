{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"gpuType":"T4","authorship_tag":"ABX9TyP5mBAFGKnyxowSap7WGE0H"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"},"accelerator":"GPU"},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"id":"Bq6ys8CMe5zX"},"outputs":[],"source":["import pandas as pd"]},{"cell_type":"markdown","source":["# Load the training data"],"metadata":{"id":"LG88rB8IiSU2"}},{"cell_type":"code","source":["training=pd.read_csv(\"/content/twitter_training.csv\")\n","test=pd.read_csv(\"/content/twitter_validation.csv\")"],"metadata":{"id":"_DCmbL7GfTmY"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["training"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":424},"id":"lP-hrHkWfnbR","executionInfo":{"status":"ok","timestamp":1719538725840,"user_tz":-420,"elapsed":511,"user":{"displayName":"Hiếu Nguyễn","userId":"17745828449678178838"}},"outputId":"0e475fb1-c6f8-4632-8082-260ed68a4a00"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["       2401  Borderlands  Positive  \\\n","0      2401  Borderlands  Positive   \n","1      2401  Borderlands  Positive   \n","2      2401  Borderlands  Positive   \n","3      2401  Borderlands  Positive   \n","4      2401  Borderlands  Positive   \n","...     ...          ...       ...   \n","74676  9200       Nvidia  Positive   \n","74677  9200       Nvidia  Positive   \n","74678  9200       Nvidia  Positive   \n","74679  9200       Nvidia  Positive   \n","74680  9200       Nvidia  Positive   \n","\n","      im getting on borderlands and i will murder you all ,  \n","0      I am coming to the borders and I will kill you...     \n","1      im getting on borderlands and i will kill you ...     \n","2      im coming on borderlands and i will murder you...     \n","3      im getting on borderlands 2 and i will murder ...     \n","4      im getting into borderlands and i can murder y...     \n","...                                                  ...     \n","74676  Just realized that the Windows partition of my...     \n","74677  Just realized that my Mac window partition is ...     \n","74678  Just realized the windows partition of my Mac ...     \n","74679  Just realized between the windows partition of...     \n","74680  Just like the windows partition of my Mac is l...     \n","\n","[74681 rows x 4 columns]"],"text/html":["\n","  <div id=\"df-07ee2cb6-34c9-488c-a996-1aa3248c79df\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>2401</th>\n","      <th>Borderlands</th>\n","      <th>Positive</th>\n","      <th>im getting on borderlands and i will murder you all ,</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>2401</td>\n","      <td>Borderlands</td>\n","      <td>Positive</td>\n","      <td>I am coming to the borders and I will kill you...</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2401</td>\n","      <td>Borderlands</td>\n","      <td>Positive</td>\n","      <td>im getting on borderlands and i will kill you ...</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>2401</td>\n","      <td>Borderlands</td>\n","      <td>Positive</td>\n","      <td>im coming on borderlands and i will murder you...</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>2401</td>\n","      <td>Borderlands</td>\n","      <td>Positive</td>\n","      <td>im getting on borderlands 2 and i will murder ...</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>2401</td>\n","      <td>Borderlands</td>\n","      <td>Positive</td>\n","      <td>im getting into borderlands and i can murder y...</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>74676</th>\n","      <td>9200</td>\n","      <td>Nvidia</td>\n","      <td>Positive</td>\n","      <td>Just realized that the Windows partition of my...</td>\n","    </tr>\n","    <tr>\n","      <th>74677</th>\n","      <td>9200</td>\n","      <td>Nvidia</td>\n","      <td>Positive</td>\n","      <td>Just realized that my Mac window partition is ...</td>\n","    </tr>\n","    <tr>\n","      <th>74678</th>\n","      <td>9200</td>\n","      <td>Nvidia</td>\n","      <td>Positive</td>\n","      <td>Just realized the windows partition of my Mac ...</td>\n","    </tr>\n","    <tr>\n","      <th>74679</th>\n","      <td>9200</td>\n","      <td>Nvidia</td>\n","      <td>Positive</td>\n","      <td>Just realized between the windows partition of...</td>\n","    </tr>\n","    <tr>\n","      <th>74680</th>\n","      <td>9200</td>\n","      <td>Nvidia</td>\n","      <td>Positive</td>\n","      <td>Just like the windows partition of my Mac is l...</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>74681 rows × 4 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-07ee2cb6-34c9-488c-a996-1aa3248c79df')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-07ee2cb6-34c9-488c-a996-1aa3248c79df button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-07ee2cb6-34c9-488c-a996-1aa3248c79df');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-4b7d2b25-8bd2-4f25-95b7-19d754de6cb0\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-4b7d2b25-8bd2-4f25-95b7-19d754de6cb0')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-4b7d2b25-8bd2-4f25-95b7-19d754de6cb0 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_a3f3c8c1-e545-4dd5-aec1-2ee20e62a67c\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('training')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_a3f3c8c1-e545-4dd5-aec1-2ee20e62a67c button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('training');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"training","summary":"{\n  \"name\": \"training\",\n  \"rows\": 74681,\n  \"fields\": [\n    {\n      \"column\": \"2401\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3740,\n        \"min\": 1,\n        \"max\": 13200,\n        \"num_unique_values\": 12447,\n        \"samples\": [\n          1616,\n          2660,\n          2335\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Borderlands\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 32,\n        \"samples\": [\n          \"Cyberpunk2077\",\n          \"Microsoft\",\n          \"TomClancysRainbowSix\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Positive\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          \"Neutral\",\n          \"Irrelevant\",\n          \"Positive\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"im getting on borderlands and i will murder you all ,\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 69490,\n        \"samples\": [\n          \"so how does my stained glass open facebook account girl already have 200 likes!!!! and i sure am so!!??? oh thankful!??!?!\",\n          \"How not to get bored about every damn thing in life.\",\n          \"The Best Perfect Way to Protect All the Planet Samsung Galaxy Note10 + By buff. ly / The 2zkjIhU..\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":3}]},{"cell_type":"markdown","source":["# Load the testing data"],"metadata":{"id":"ff2RjdpFiYhD"}},{"cell_type":"code","source":["test"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":441},"id":"dtvYgJUKfq-A","executionInfo":{"status":"ok","timestamp":1719538734817,"user_tz":-420,"elapsed":481,"user":{"displayName":"Hiếu Nguyễn","userId":"17745828449678178838"}},"outputId":"f5b6af12-5762-4369-930d-2ae2fef7ad78"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["     3364             Facebook  Irrelevant  \\\n","0     352               Amazon     Neutral   \n","1    8312            Microsoft    Negative   \n","2    4371                CS-GO    Negative   \n","3    4433               Google     Neutral   \n","4    6273                 FIFA    Negative   \n","..    ...                  ...         ...   \n","994  4891  GrandTheftAuto(GTA)  Irrelevant   \n","995  4359                CS-GO  Irrelevant   \n","996  2652          Borderlands    Positive   \n","997  8069            Microsoft    Positive   \n","998  6960      johnson&johnson     Neutral   \n","\n","    I mentioned on Facebook that I was struggling for motivation to go for a run the other day, which has been translated by Tom’s great auntie as ‘Hayley can’t get out of bed’ and told to his grandma, who now thinks I’m a lazy, terrible person 🤣  \n","0    BBC News - Amazon boss Jeff Bezos rejects clai...                                                                                                                                                                                                  \n","1    @Microsoft Why do I pay for WORD when it funct...                                                                                                                                                                                                  \n","2    CSGO matchmaking is so full of closet hacking,...                                                                                                                                                                                                  \n","3    Now the President is slapping Americans in the...                                                                                                                                                                                                  \n","4    Hi @EAHelp I’ve had Madeleine McCann in my cel...                                                                                                                                                                                                  \n","..                                                 ...                                                                                                                                                                                                  \n","994  ⭐️ Toronto is the arts and culture capital of ...                                                                                                                                                                                                  \n","995  tHIS IS ACTUALLY A GOOD MOVE TOT BRING MORE VI...                                                                                                                                                                                                  \n","996  Today sucked so it’s time to drink wine n play...                                                                                                                                                                                                  \n","997  Bought a fraction of Microsoft today. Small wins.                                                                                                                                                                                                  \n","998  Johnson & Johnson to stop selling talc baby po...                                                                                                                                                                                                  \n","\n","[999 rows x 4 columns]"],"text/html":["\n","  <div id=\"df-90fad188-c4e9-4a89-8e1f-0b086500e8d8\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>3364</th>\n","      <th>Facebook</th>\n","      <th>Irrelevant</th>\n","      <th>I mentioned on Facebook that I was struggling for motivation to go for a run the other day, which has been translated by Tom’s great auntie as ‘Hayley can’t get out of bed’ and told to his grandma, who now thinks I’m a lazy, terrible person 🤣</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>352</td>\n","      <td>Amazon</td>\n","      <td>Neutral</td>\n","      <td>BBC News - Amazon boss Jeff Bezos rejects clai...</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>8312</td>\n","      <td>Microsoft</td>\n","      <td>Negative</td>\n","      <td>@Microsoft Why do I pay for WORD when it funct...</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>4371</td>\n","      <td>CS-GO</td>\n","      <td>Negative</td>\n","      <td>CSGO matchmaking is so full of closet hacking,...</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>4433</td>\n","      <td>Google</td>\n","      <td>Neutral</td>\n","      <td>Now the President is slapping Americans in the...</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>6273</td>\n","      <td>FIFA</td>\n","      <td>Negative</td>\n","      <td>Hi @EAHelp I’ve had Madeleine McCann in my cel...</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>994</th>\n","      <td>4891</td>\n","      <td>GrandTheftAuto(GTA)</td>\n","      <td>Irrelevant</td>\n","      <td>⭐️ Toronto is the arts and culture capital of ...</td>\n","    </tr>\n","    <tr>\n","      <th>995</th>\n","      <td>4359</td>\n","      <td>CS-GO</td>\n","      <td>Irrelevant</td>\n","      <td>tHIS IS ACTUALLY A GOOD MOVE TOT BRING MORE VI...</td>\n","    </tr>\n","    <tr>\n","      <th>996</th>\n","      <td>2652</td>\n","      <td>Borderlands</td>\n","      <td>Positive</td>\n","      <td>Today sucked so it’s time to drink wine n play...</td>\n","    </tr>\n","    <tr>\n","      <th>997</th>\n","      <td>8069</td>\n","      <td>Microsoft</td>\n","      <td>Positive</td>\n","      <td>Bought a fraction of Microsoft today. Small wins.</td>\n","    </tr>\n","    <tr>\n","      <th>998</th>\n","      <td>6960</td>\n","      <td>johnson&amp;johnson</td>\n","      <td>Neutral</td>\n","      <td>Johnson &amp; Johnson to stop selling talc baby po...</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>999 rows × 4 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-90fad188-c4e9-4a89-8e1f-0b086500e8d8')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-90fad188-c4e9-4a89-8e1f-0b086500e8d8 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-90fad188-c4e9-4a89-8e1f-0b086500e8d8');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-f3981259-7e4a-44eb-a9d9-e43fd7a19adc\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-f3981259-7e4a-44eb-a9d9-e43fd7a19adc')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-f3981259-7e4a-44eb-a9d9-e43fd7a19adc button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_09268d96-48cb-460d-ae25-f71b66e5388f\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('test')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_09268d96-48cb-460d-ae25-f71b66e5388f button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('test');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"test","summary":"{\n  \"name\": \"test\",\n  \"rows\": 999,\n  \"fields\": [\n    {\n      \"column\": \"3364\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3728,\n        \"min\": 6,\n        \"max\": 13197,\n        \"num_unique_values\": 999,\n        \"samples\": [\n          10513,\n          9792,\n          12509\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Facebook\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 32,\n        \"samples\": [\n          \"WorldOfCraft\",\n          \"Hearthstone\",\n          \"CallOfDutyBlackopsColdWar\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Irrelevant\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          \"Negative\",\n          \"Irrelevant\",\n          \"Neutral\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"I mentioned on Facebook that I was struggling for motivation to go for a run the other day, which has been translated by Tom\\u2019s great auntie as \\u2018Hayley can\\u2019t get out of bed\\u2019 and told to his grandma, who now thinks I\\u2019m a lazy, terrible person \\ud83e\\udd23\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 998,\n        \"samples\": [\n          \"Red Dead Redemption 2 - Xbox - jogando no Game Pass \\n\\nm.mixer.com/valtinhoroberto\\n\\n(#game)\",\n          \"@Xbox @majornelson I\\u2019d love to bring home a new Xbox Series X, but they are all sold out. So the emails are VERY misleading. Just sayin.\",\n          \"Team JerseyBoys is now also represented on Twitch.\\n\\nWelcome @chucky_CSGO  \\n\\nOur chef of confidence, will offer you content from various games like World Of Warcraft, CS:GO or Valorant on Twitch. \\n\\nClick here for the Twitch Channel: tinyurl.com/y5gm9h74\\n\\n#jerseyboys #twitch https://t.co/OwimJcs4uJ\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":4}]},{"cell_type":"markdown","source":["# Add headers for the columns in each dataframe"],"metadata":{"id":"CYNi_ueWikmZ"}},{"cell_type":"code","source":["test.columns = ['Header1', 'company','labels','text']\n","training.columns = ['Header1', 'company','labels','text']"],"metadata":{"id":"v0gu6EQrftJ9"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["print(training)\n","print(\"---------------------------------------------------------------------\")\n","print(test)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"5qd5dcc0fzoa","executionInfo":{"status":"ok","timestamp":1719538772963,"user_tz":-420,"elapsed":512,"user":{"displayName":"Hiếu Nguyễn","userId":"17745828449678178838"}},"outputId":"967331f2-13b2-45e4-9f32-9cd7fdb7d638"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["       Header1      company    labels  \\\n","0         2401  Borderlands  Positive   \n","1         2401  Borderlands  Positive   \n","2         2401  Borderlands  Positive   \n","3         2401  Borderlands  Positive   \n","4         2401  Borderlands  Positive   \n","...        ...          ...       ...   \n","74676     9200       Nvidia  Positive   \n","74677     9200       Nvidia  Positive   \n","74678     9200       Nvidia  Positive   \n","74679     9200       Nvidia  Positive   \n","74680     9200       Nvidia  Positive   \n","\n","                                                    text  \n","0      I am coming to the borders and I will kill you...  \n","1      im getting on borderlands and i will kill you ...  \n","2      im coming on borderlands and i will murder you...  \n","3      im getting on borderlands 2 and i will murder ...  \n","4      im getting into borderlands and i can murder y...  \n","...                                                  ...  \n","74676  Just realized that the Windows partition of my...  \n","74677  Just realized that my Mac window partition is ...  \n","74678  Just realized the windows partition of my Mac ...  \n","74679  Just realized between the windows partition of...  \n","74680  Just like the windows partition of my Mac is l...  \n","\n","[74681 rows x 4 columns]\n","---------------------------------------------------------------------\n","     Header1              company      labels  \\\n","0        352               Amazon     Neutral   \n","1       8312            Microsoft    Negative   \n","2       4371                CS-GO    Negative   \n","3       4433               Google     Neutral   \n","4       6273                 FIFA    Negative   \n","..       ...                  ...         ...   \n","994     4891  GrandTheftAuto(GTA)  Irrelevant   \n","995     4359                CS-GO  Irrelevant   \n","996     2652          Borderlands    Positive   \n","997     8069            Microsoft    Positive   \n","998     6960      johnson&johnson     Neutral   \n","\n","                                                  text  \n","0    BBC News - Amazon boss Jeff Bezos rejects clai...  \n","1    @Microsoft Why do I pay for WORD when it funct...  \n","2    CSGO matchmaking is so full of closet hacking,...  \n","3    Now the President is slapping Americans in the...  \n","4    Hi @EAHelp I’ve had Madeleine McCann in my cel...  \n","..                                                 ...  \n","994  ⭐️ Toronto is the arts and culture capital of ...  \n","995  tHIS IS ACTUALLY A GOOD MOVE TOT BRING MORE VI...  \n","996  Today sucked so it’s time to drink wine n play...  \n","997  Bought a fraction of Microsoft today. Small wins.  \n","998  Johnson & Johnson to stop selling talc baby po...  \n","\n","[999 rows x 4 columns]\n"]}]},{"cell_type":"markdown","source":["# Delete unneeded columns"],"metadata":{"id":"BdBjyz9tisCc"}},{"cell_type":"code","source":["training.drop(columns=[\"Header1\",\"company\"],inplace=True)\n","test.drop(columns=[\"Header1\",\"company\"],inplace=True)"],"metadata":{"id":"SDP0CTzsf2eM"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["training.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"id":"5a9eKWKggByg","executionInfo":{"status":"ok","timestamp":1719538831803,"user_tz":-420,"elapsed":515,"user":{"displayName":"Hiếu Nguyễn","userId":"17745828449678178838"}},"outputId":"c0470bc3-c7be-407e-ca7a-2c3e512dfb2f"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["     labels                                               text\n","0  Positive  I am coming to the borders and I will kill you...\n","1  Positive  im getting on borderlands and i will kill you ...\n","2  Positive  im coming on borderlands and i will murder you...\n","3  Positive  im getting on borderlands 2 and i will murder ...\n","4  Positive  im getting into borderlands and i can murder y..."],"text/html":["\n","  <div id=\"df-a3c7c0c8-1873-44d5-9f73-26f0a368b7f3\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>labels</th>\n","      <th>text</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>Positive</td>\n","      <td>I am coming to the borders and I will kill you...</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>Positive</td>\n","      <td>im getting on borderlands and i will kill you ...</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>Positive</td>\n","      <td>im coming on borderlands and i will murder you...</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>Positive</td>\n","      <td>im getting on borderlands 2 and i will murder ...</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>Positive</td>\n","      <td>im getting into borderlands and i can murder y...</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-a3c7c0c8-1873-44d5-9f73-26f0a368b7f3')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-a3c7c0c8-1873-44d5-9f73-26f0a368b7f3 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-a3c7c0c8-1873-44d5-9f73-26f0a368b7f3');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-02b6a605-bfc6-45ee-a9e8-22c8deeb460b\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-02b6a605-bfc6-45ee-a9e8-22c8deeb460b')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-02b6a605-bfc6-45ee-a9e8-22c8deeb460b button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"training","summary":"{\n  \"name\": \"training\",\n  \"rows\": 74681,\n  \"fields\": [\n    {\n      \"column\": \"labels\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          \"Neutral\",\n          \"Irrelevant\",\n          \"Positive\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"text\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 69490,\n        \"samples\": [\n          \"so how does my stained glass open facebook account girl already have 200 likes!!!! and i sure am so!!??? oh thankful!??!?!\",\n          \"How not to get bored about every damn thing in life.\",\n          \"The Best Perfect Way to Protect All the Planet Samsung Galaxy Note10 + By buff. ly / The 2zkjIhU..\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":8}]},{"cell_type":"code","source":["test.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"id":"Gg2bu6KzgE0O","executionInfo":{"status":"ok","timestamp":1719538846022,"user_tz":-420,"elapsed":462,"user":{"displayName":"Hiếu Nguyễn","userId":"17745828449678178838"}},"outputId":"3ebeed9b-3cb8-4d16-9d63-3b4f14d4435d"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["     labels                                               text\n","0   Neutral  BBC News - Amazon boss Jeff Bezos rejects clai...\n","1  Negative  @Microsoft Why do I pay for WORD when it funct...\n","2  Negative  CSGO matchmaking is so full of closet hacking,...\n","3   Neutral  Now the President is slapping Americans in the...\n","4  Negative  Hi @EAHelp I’ve had Madeleine McCann in my cel..."],"text/html":["\n","  <div id=\"df-ad9388e9-a43d-4bbb-b3a8-8a080a8fea2a\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>labels</th>\n","      <th>text</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>Neutral</td>\n","      <td>BBC News - Amazon boss Jeff Bezos rejects clai...</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>Negative</td>\n","      <td>@Microsoft Why do I pay for WORD when it funct...</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>Negative</td>\n","      <td>CSGO matchmaking is so full of closet hacking,...</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>Neutral</td>\n","      <td>Now the President is slapping Americans in the...</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>Negative</td>\n","      <td>Hi @EAHelp I’ve had Madeleine McCann in my cel...</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-ad9388e9-a43d-4bbb-b3a8-8a080a8fea2a')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-ad9388e9-a43d-4bbb-b3a8-8a080a8fea2a button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-ad9388e9-a43d-4bbb-b3a8-8a080a8fea2a');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-921534c6-212b-4aa2-85b7-eb71f4bf2c6f\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-921534c6-212b-4aa2-85b7-eb71f4bf2c6f')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-921534c6-212b-4aa2-85b7-eb71f4bf2c6f button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"test","summary":"{\n  \"name\": \"test\",\n  \"rows\": 999,\n  \"fields\": [\n    {\n      \"column\": \"labels\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          \"Negative\",\n          \"Irrelevant\",\n          \"Neutral\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"text\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 998,\n        \"samples\": [\n          \"Red Dead Redemption 2 - Xbox - jogando no Game Pass \\n\\nm.mixer.com/valtinhoroberto\\n\\n(#game)\",\n          \"@Xbox @majornelson I\\u2019d love to bring home a new Xbox Series X, but they are all sold out. So the emails are VERY misleading. Just sayin.\",\n          \"Team JerseyBoys is now also represented on Twitch.\\n\\nWelcome @chucky_CSGO  \\n\\nOur chef of confidence, will offer you content from various games like World Of Warcraft, CS:GO or Valorant on Twitch. \\n\\nClick here for the Twitch Channel: tinyurl.com/y5gm9h74\\n\\n#jerseyboys #twitch https://t.co/OwimJcs4uJ\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":9}]},{"cell_type":"markdown","source":["# Add the two data frame in one datarame"],"metadata":{"id":"n9XDK9cxiy3i"}},{"cell_type":"code","source":["sentiment=pd.concat([training,test],ignore_index=True)\n","sentiment"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":424},"id":"1gO-NMqBgIUL","executionInfo":{"status":"ok","timestamp":1719538856184,"user_tz":-420,"elapsed":526,"user":{"displayName":"Hiếu Nguyễn","userId":"17745828449678178838"}},"outputId":"626f4afa-100c-471c-9de6-466e811a2c62"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["           labels                                               text\n","0        Positive  I am coming to the borders and I will kill you...\n","1        Positive  im getting on borderlands and i will kill you ...\n","2        Positive  im coming on borderlands and i will murder you...\n","3        Positive  im getting on borderlands 2 and i will murder ...\n","4        Positive  im getting into borderlands and i can murder y...\n","...           ...                                                ...\n","75675  Irrelevant  ⭐️ Toronto is the arts and culture capital of ...\n","75676  Irrelevant  tHIS IS ACTUALLY A GOOD MOVE TOT BRING MORE VI...\n","75677    Positive  Today sucked so it’s time to drink wine n play...\n","75678    Positive  Bought a fraction of Microsoft today. Small wins.\n","75679     Neutral  Johnson & Johnson to stop selling talc baby po...\n","\n","[75680 rows x 2 columns]"],"text/html":["\n","  <div id=\"df-8c328b85-dc25-4f6d-aa14-76f857c596fe\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>labels</th>\n","      <th>text</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>Positive</td>\n","      <td>I am coming to the borders and I will kill you...</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>Positive</td>\n","      <td>im getting on borderlands and i will kill you ...</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>Positive</td>\n","      <td>im coming on borderlands and i will murder you...</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>Positive</td>\n","      <td>im getting on borderlands 2 and i will murder ...</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>Positive</td>\n","      <td>im getting into borderlands and i can murder y...</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>75675</th>\n","      <td>Irrelevant</td>\n","      <td>⭐️ Toronto is the arts and culture capital of ...</td>\n","    </tr>\n","    <tr>\n","      <th>75676</th>\n","      <td>Irrelevant</td>\n","      <td>tHIS IS ACTUALLY A GOOD MOVE TOT BRING MORE VI...</td>\n","    </tr>\n","    <tr>\n","      <th>75677</th>\n","      <td>Positive</td>\n","      <td>Today sucked so it’s time to drink wine n play...</td>\n","    </tr>\n","    <tr>\n","      <th>75678</th>\n","      <td>Positive</td>\n","      <td>Bought a fraction of Microsoft today. Small wins.</td>\n","    </tr>\n","    <tr>\n","      <th>75679</th>\n","      <td>Neutral</td>\n","      <td>Johnson &amp; Johnson to stop selling talc baby po...</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>75680 rows × 2 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-8c328b85-dc25-4f6d-aa14-76f857c596fe')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-8c328b85-dc25-4f6d-aa14-76f857c596fe button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-8c328b85-dc25-4f6d-aa14-76f857c596fe');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-5334f058-3dfa-4eac-8769-3b9365d6042d\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-5334f058-3dfa-4eac-8769-3b9365d6042d')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-5334f058-3dfa-4eac-8769-3b9365d6042d button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_a930282f-9d93-4808-b45b-48022f78de82\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('sentiment')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_a930282f-9d93-4808-b45b-48022f78de82 button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('sentiment');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"sentiment","summary":"{\n  \"name\": \"sentiment\",\n  \"rows\": 75680,\n  \"fields\": [\n    {\n      \"column\": \"labels\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          \"Neutral\",\n          \"Irrelevant\",\n          \"Positive\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"text\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 69973,\n        \"samples\": [\n          \"| So fun and I feel like causing mayhem .   You tryna hop on ?\",\n          \"You know you\\u2019re getting older before Home Depot becomes your favorite store\",\n          \"niggas must really be out here they tryna play me like I'myself m call of duty! I hate it right here\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":10}]},{"cell_type":"markdown","source":["# Check for cleaning data"],"metadata":{"id":"qdNhnyt7i41i"}},{"cell_type":"code","source":["sentiment.info()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"4Wi6ksLsgKx9","executionInfo":{"status":"ok","timestamp":1719538866209,"user_tz":-420,"elapsed":524,"user":{"displayName":"Hiếu Nguyễn","userId":"17745828449678178838"}},"outputId":"95653865-d6a9-41db-80e8-2a3ddef5fa78"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 75680 entries, 0 to 75679\n","Data columns (total 2 columns):\n"," #   Column  Non-Null Count  Dtype \n","---  ------  --------------  ----- \n"," 0   labels  75680 non-null  object\n"," 1   text    74994 non-null  object\n","dtypes: object(2)\n","memory usage: 1.2+ MB\n"]}]},{"cell_type":"code","source":["sentiment.isnull().sum()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"iuBUVfXZgNOp","executionInfo":{"status":"ok","timestamp":1719538875454,"user_tz":-420,"elapsed":471,"user":{"displayName":"Hiếu Nguyễn","userId":"17745828449678178838"}},"outputId":"eec75dc6-44c1-4ea2-9779-dab6706f7ac1"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["labels      0\n","text      686\n","dtype: int64"]},"metadata":{},"execution_count":12}]},{"cell_type":"code","source":["sentiment.dropna(inplace=True)\n","sentiment.isnull().sum()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"FoYqXOX_gPgK","executionInfo":{"status":"ok","timestamp":1719538887733,"user_tz":-420,"elapsed":434,"user":{"displayName":"Hiếu Nguyễn","userId":"17745828449678178838"}},"outputId":"f350ae93-a9db-40a9-a805-ed1834493c71"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["labels    0\n","text      0\n","dtype: int64"]},"metadata":{},"execution_count":13}]},{"cell_type":"code","source":["sentiment.duplicated().sum()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"PO0Q77hxgSf_","executionInfo":{"status":"ok","timestamp":1719538898387,"user_tz":-420,"elapsed":565,"user":{"displayName":"Hiếu Nguyễn","userId":"17745828449678178838"}},"outputId":"9e2986d2-834a-4155-ac5b-15c841ef8b87"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["4743"]},"metadata":{},"execution_count":14}]},{"cell_type":"code","source":["sentiment.drop_duplicates(inplace=True)\n","sentiment.duplicated().sum()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"V81zlT0pgU7o","executionInfo":{"status":"ok","timestamp":1719538906828,"user_tz":-420,"elapsed":423,"user":{"displayName":"Hiếu Nguyễn","userId":"17745828449678178838"}},"outputId":"302bf09d-4594-46f3-c176-3365a7255623"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0"]},"metadata":{},"execution_count":15}]},{"cell_type":"code","source":["train_df.shape"],"metadata":{"id":"xUu2ajO-XbZN"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# Preprocessing the text n the data"],"metadata":{"id":"U7bss1mzi--t"}},{"cell_type":"code","source":["import re\n","import nltk\n","from nltk.tokenize import word_tokenize\n","from nltk.corpus import stopwords\n","from nltk.stem import WordNetLemmatizer\n","import numpy as np\n","nltk.download('wordnet', \"/kaggle/working/nltk_data/\")\n","nltk.download('omw-1.4', \"/kaggle/working/nltk_data/\")\n","! unzip /kaggle/working/nltk_data/corpora/wordnet.zip -d /kaggle/working/nltk_data/corpora\n","! unzip /kaggle/working/nltk_data/corpora/omw-1.4.zip -d /kaggle/working/nltk_data/corpora\n","nltk.data.path.append(\"/kaggle/working/nltk_data/\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"vRNd-UE6gXK4","executionInfo":{"status":"ok","timestamp":1719538926330,"user_tz":-420,"elapsed":3819,"user":{"displayName":"Hiếu Nguyễn","userId":"17745828449678178838"}},"outputId":"821a381f-d9f2-4f1b-bf52-4e2d63f304de"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["[nltk_data] Downloading package wordnet to\n","[nltk_data]     /kaggle/working/nltk_data/...\n","[nltk_data] Downloading package omw-1.4 to\n","[nltk_data]     /kaggle/working/nltk_data/...\n"]},{"output_type":"stream","name":"stdout","text":["Archive:  /kaggle/working/nltk_data/corpora/wordnet.zip\n","   creating: /kaggle/working/nltk_data/corpora/wordnet/\n","  inflating: /kaggle/working/nltk_data/corpora/wordnet/lexnames  \n","  inflating: /kaggle/working/nltk_data/corpora/wordnet/data.verb  \n","  inflating: /kaggle/working/nltk_data/corpora/wordnet/index.adv  \n","  inflating: /kaggle/working/nltk_data/corpora/wordnet/adv.exc  \n","  inflating: /kaggle/working/nltk_data/corpora/wordnet/index.verb  \n","  inflating: /kaggle/working/nltk_data/corpora/wordnet/cntlist.rev  \n","  inflating: /kaggle/working/nltk_data/corpora/wordnet/data.adj  \n","  inflating: /kaggle/working/nltk_data/corpora/wordnet/index.adj  \n","  inflating: /kaggle/working/nltk_data/corpora/wordnet/LICENSE  \n","  inflating: /kaggle/working/nltk_data/corpora/wordnet/citation.bib  \n","  inflating: /kaggle/working/nltk_data/corpora/wordnet/noun.exc  \n","  inflating: /kaggle/working/nltk_data/corpora/wordnet/verb.exc  \n","  inflating: /kaggle/working/nltk_data/corpora/wordnet/README  \n","  inflating: /kaggle/working/nltk_data/corpora/wordnet/index.sense  \n","  inflating: /kaggle/working/nltk_data/corpora/wordnet/data.noun  \n","  inflating: /kaggle/working/nltk_data/corpora/wordnet/data.adv  \n","  inflating: /kaggle/working/nltk_data/corpora/wordnet/index.noun  \n","  inflating: /kaggle/working/nltk_data/corpora/wordnet/adj.exc  \n","Archive:  /kaggle/working/nltk_data/corpora/omw-1.4.zip\n","   creating: /kaggle/working/nltk_data/corpora/omw-1.4/\n","   creating: /kaggle/working/nltk_data/corpora/omw-1.4/fin/\n","  inflating: /kaggle/working/nltk_data/corpora/omw-1.4/fin/LICENSE  \n","  inflating: /kaggle/working/nltk_data/corpora/omw-1.4/fin/citation.bib  \n","  inflating: /kaggle/working/nltk_data/corpora/omw-1.4/fin/wn-data-fin.tab  \n","   creating: /kaggle/working/nltk_data/corpora/omw-1.4/heb/\n","  inflating: /kaggle/working/nltk_data/corpora/omw-1.4/heb/LICENSE  \n","  inflating: /kaggle/working/nltk_data/corpora/omw-1.4/heb/citation.bib  \n","  inflating: /kaggle/working/nltk_data/corpora/omw-1.4/heb/README  \n","  inflating: /kaggle/working/nltk_data/corpora/omw-1.4/heb/wn-data-heb.tab  \n","   creating: /kaggle/working/nltk_data/corpora/omw-1.4/slv/\n","  inflating: /kaggle/working/nltk_data/corpora/omw-1.4/slv/LICENSE  \n","  inflating: /kaggle/working/nltk_data/corpora/omw-1.4/slv/citation.bib  \n","  inflating: /kaggle/working/nltk_data/corpora/omw-1.4/slv/README  \n","  inflating: /kaggle/working/nltk_data/corpora/omw-1.4/slv/wn-data-slv.tab  \n","   creating: /kaggle/working/nltk_data/corpora/omw-1.4/ita/\n","  inflating: /kaggle/working/nltk_data/corpora/omw-1.4/ita/LICENSE  \n","  inflating: /kaggle/working/nltk_data/corpora/omw-1.4/ita/citation.bib  \n","  inflating: /kaggle/working/nltk_data/corpora/omw-1.4/ita/wn-data-ita.tab  \n"," extracting: /kaggle/working/nltk_data/corpora/omw-1.4/ita/README  \n","   creating: /kaggle/working/nltk_data/corpora/omw-1.4/nor/\n","  inflating: /kaggle/working/nltk_data/corpora/omw-1.4/nor/LICENSE  \n","  inflating: /kaggle/working/nltk_data/corpora/omw-1.4/nor/citation.bib  \n","  inflating: /kaggle/working/nltk_data/corpora/omw-1.4/nor/README  \n","  inflating: /kaggle/working/nltk_data/corpora/omw-1.4/nor/wn-data-nno.tab  \n","  inflating: /kaggle/working/nltk_data/corpora/omw-1.4/nor/wn-data-nob.tab  \n","   creating: /kaggle/working/nltk_data/corpora/omw-1.4/als/\n","  inflating: /kaggle/working/nltk_data/corpora/omw-1.4/als/wn-data-als.tab  \n","  inflating: /kaggle/working/nltk_data/corpora/omw-1.4/als/LICENSE  \n","  inflating: /kaggle/working/nltk_data/corpora/omw-1.4/als/citation.bib  \n","  inflating: /kaggle/working/nltk_data/corpora/omw-1.4/als/README  \n","   creating: /kaggle/working/nltk_data/corpora/omw-1.4/pol/\n","  inflating: /kaggle/working/nltk_data/corpora/omw-1.4/pol/LICENSE  \n","  inflating: /kaggle/working/nltk_data/corpora/omw-1.4/pol/citation.bib  \n","  inflating: /kaggle/working/nltk_data/corpora/omw-1.4/pol/wn-data-pol.tab  \n","   creating: /kaggle/working/nltk_data/corpora/omw-1.4/hrv/\n"," extracting: /kaggle/working/nltk_data/corpora/omw-1.4/hrv/LICENSE  \n","  inflating: /kaggle/working/nltk_data/corpora/omw-1.4/hrv/citation.bib  \n","  inflating: /kaggle/working/nltk_data/corpora/omw-1.4/hrv/wn-data-hrv.tab  \n","  inflating: /kaggle/working/nltk_data/corpora/omw-1.4/hrv/README  \n","  inflating: /kaggle/working/nltk_data/corpora/omw-1.4/citation.bib  \n","   creating: /kaggle/working/nltk_data/corpora/omw-1.4/iwn/\n","  inflating: /kaggle/working/nltk_data/corpora/omw-1.4/iwn/LICENSE  \n","  inflating: /kaggle/working/nltk_data/corpora/omw-1.4/iwn/citation.bib  \n","  inflating: /kaggle/working/nltk_data/corpora/omw-1.4/iwn/wn-data-ita.tab  \n","  inflating: /kaggle/working/nltk_data/corpora/omw-1.4/iwn/README  \n","   creating: /kaggle/working/nltk_data/corpora/omw-1.4/nld/\n","  inflating: /kaggle/working/nltk_data/corpora/omw-1.4/nld/LICENSE  \n","  inflating: /kaggle/working/nltk_data/corpora/omw-1.4/nld/wn-data-nld.tab  \n","  inflating: /kaggle/working/nltk_data/corpora/omw-1.4/nld/citation.bib  \n","   creating: /kaggle/working/nltk_data/corpora/omw-1.4/ron/\n","  inflating: /kaggle/working/nltk_data/corpora/omw-1.4/ron/LICENSE  \n","  inflating: /kaggle/working/nltk_data/corpora/omw-1.4/ron/citation.bib  \n","  inflating: /kaggle/working/nltk_data/corpora/omw-1.4/ron/wn-data-ron.tab  \n","  inflating: /kaggle/working/nltk_data/corpora/omw-1.4/ron/README  \n","   creating: /kaggle/working/nltk_data/corpora/omw-1.4/arb/\n","  inflating: /kaggle/working/nltk_data/corpora/omw-1.4/arb/LICENSE  \n","  inflating: /kaggle/working/nltk_data/corpora/omw-1.4/arb/citation.bib  \n","  inflating: /kaggle/working/nltk_data/corpora/omw-1.4/arb/README  \n","  inflating: /kaggle/working/nltk_data/corpora/omw-1.4/arb/wn-data-arb.tab  \n","   creating: /kaggle/working/nltk_data/corpora/omw-1.4/isl/\n","  inflating: /kaggle/working/nltk_data/corpora/omw-1.4/isl/LICENSE  \n","  inflating: /kaggle/working/nltk_data/corpora/omw-1.4/isl/citation.bib  \n","  inflating: /kaggle/working/nltk_data/corpora/omw-1.4/isl/README  \n","  inflating: /kaggle/working/nltk_data/corpora/omw-1.4/isl/wn-data-isl.tab  \n","   creating: /kaggle/working/nltk_data/corpora/omw-1.4/swe/\n","  inflating: /kaggle/working/nltk_data/corpora/omw-1.4/swe/LICENSE  \n","  inflating: /kaggle/working/nltk_data/corpora/omw-1.4/swe/citation.bib  \n","  inflating: /kaggle/working/nltk_data/corpora/omw-1.4/swe/README  \n","  inflating: /kaggle/working/nltk_data/corpora/omw-1.4/swe/wn-data-swe.tab  \n","   creating: /kaggle/working/nltk_data/corpora/omw-1.4/por/\n","  inflating: /kaggle/working/nltk_data/corpora/omw-1.4/por/LICENSE  \n","  inflating: /kaggle/working/nltk_data/corpora/omw-1.4/por/citation.bib  \n","  inflating: /kaggle/working/nltk_data/corpora/omw-1.4/por/wn-data-por.tab  \n","  inflating: /kaggle/working/nltk_data/corpora/omw-1.4/por/README  \n","  inflating: /kaggle/working/nltk_data/corpora/omw-1.4/README  \n","   creating: /kaggle/working/nltk_data/corpora/omw-1.4/cow/\n","  inflating: /kaggle/working/nltk_data/corpora/omw-1.4/cow/wn-data-cmn.tab  \n","  inflating: /kaggle/working/nltk_data/corpora/omw-1.4/cow/LICENSE  \n","  inflating: /kaggle/working/nltk_data/corpora/omw-1.4/cow/citation.bib  \n","   creating: /kaggle/working/nltk_data/corpora/omw-1.4/jpn/\n","  inflating: /kaggle/working/nltk_data/corpora/omw-1.4/jpn/LICENSE  \n","  inflating: /kaggle/working/nltk_data/corpora/omw-1.4/jpn/citation.bib  \n","  inflating: /kaggle/working/nltk_data/corpora/omw-1.4/jpn/README  \n","  inflating: /kaggle/working/nltk_data/corpora/omw-1.4/jpn/wn-data-jpn.tab  \n","   creating: /kaggle/working/nltk_data/corpora/omw-1.4/dan/\n","  inflating: /kaggle/working/nltk_data/corpora/omw-1.4/dan/LICENSE  \n","  inflating: /kaggle/working/nltk_data/corpora/omw-1.4/dan/citation.bib  \n","  inflating: /kaggle/working/nltk_data/corpora/omw-1.4/dan/wn-data-dan.tab  \n","   creating: /kaggle/working/nltk_data/corpora/omw-1.4/slk/\n","  inflating: /kaggle/working/nltk_data/corpora/omw-1.4/slk/LICENSE  \n","  inflating: /kaggle/working/nltk_data/corpora/omw-1.4/slk/citation.bib  \n","  inflating: /kaggle/working/nltk_data/corpora/omw-1.4/slk/wn-data-slk.tab  \n","  inflating: /kaggle/working/nltk_data/corpora/omw-1.4/slk/wn-data-lit.tab  \n","  inflating: /kaggle/working/nltk_data/corpora/omw-1.4/slk/README  \n","   creating: /kaggle/working/nltk_data/corpora/omw-1.4/bul/\n","  inflating: /kaggle/working/nltk_data/corpora/omw-1.4/bul/LICENSE  \n","  inflating: /kaggle/working/nltk_data/corpora/omw-1.4/bul/citation.bib  \n","  inflating: /kaggle/working/nltk_data/corpora/omw-1.4/bul/wn-data-bul.tab  \n","  inflating: /kaggle/working/nltk_data/corpora/omw-1.4/bul/README  \n","   creating: /kaggle/working/nltk_data/corpora/omw-1.4/mcr/\n","  inflating: /kaggle/working/nltk_data/corpora/omw-1.4/mcr/LICENSE  \n","  inflating: /kaggle/working/nltk_data/corpora/omw-1.4/mcr/citation.bib  \n","  inflating: /kaggle/working/nltk_data/corpora/omw-1.4/mcr/wn-data-eus.tab  \n","  inflating: /kaggle/working/nltk_data/corpora/omw-1.4/mcr/wn-data-cat.tab  \n","  inflating: /kaggle/working/nltk_data/corpora/omw-1.4/mcr/wn-data-glg.tab  \n","  inflating: /kaggle/working/nltk_data/corpora/omw-1.4/mcr/wn-data-spa.tab  \n","   creating: /kaggle/working/nltk_data/corpora/omw-1.4/ell/\n","  inflating: /kaggle/working/nltk_data/corpora/omw-1.4/ell/LICENSE  \n","  inflating: /kaggle/working/nltk_data/corpora/omw-1.4/ell/wn-data-ell.tab  \n","  inflating: /kaggle/working/nltk_data/corpora/omw-1.4/ell/README  \n","   creating: /kaggle/working/nltk_data/corpora/omw-1.4/msa/\n","  inflating: /kaggle/working/nltk_data/corpora/omw-1.4/msa/LICENSE  \n","  inflating: /kaggle/working/nltk_data/corpora/omw-1.4/msa/citation.bib  \n","  inflating: /kaggle/working/nltk_data/corpora/omw-1.4/msa/wn-data-zsm.tab  \n","  inflating: /kaggle/working/nltk_data/corpora/omw-1.4/msa/wn-data-ind.tab  \n","  inflating: /kaggle/working/nltk_data/corpora/omw-1.4/msa/README  \n","   creating: /kaggle/working/nltk_data/corpora/omw-1.4/fra/\n","  inflating: /kaggle/working/nltk_data/corpora/omw-1.4/fra/LICENSE  \n","  inflating: /kaggle/working/nltk_data/corpora/omw-1.4/fra/citation.bib  \n","  inflating: /kaggle/working/nltk_data/corpora/omw-1.4/fra/wn-data-fra.tab  \n","   creating: /kaggle/working/nltk_data/corpora/omw-1.4/tha/\n","  inflating: /kaggle/working/nltk_data/corpora/omw-1.4/tha/LICENSE  \n","  inflating: /kaggle/working/nltk_data/corpora/omw-1.4/tha/citation.bib  \n","  inflating: /kaggle/working/nltk_data/corpora/omw-1.4/tha/wn-data-tha.tab  \n"]}]},{"cell_type":"markdown","source":["# Cleaning the text"],"metadata":{"id":"rTkP4W7WjHmX"}},{"cell_type":"code","source":["def process_text(text):\n","    text = re.sub(r'\\s+', ' ', text, flags=re.I) # Remove extra white space from text\n","\n","    text = re.sub(r'\\W', ' ', str(text)) # Remove all the special characters from text\n","\n","    text = re.sub(r'\\s+[a-zA-Z]\\s+', ' ', text) # Remove all single characters from text\n","\n","    text = re.sub(r'[^a-zA-Z\\s]', '', text) # Remove any character that isn't alphabetical\n","\n","    text = text.lower()\n","\n","    words = word_tokenize(text)\n","\n","    lemmatizer = WordNetLemmatizer()\n","    words = [lemmatizer.lemmatize(word) for word in words]\n","\n","    stop_words = set(stopwords.words(\"english\"))\n","    Words = [word for word in words if word not in stop_words]\n","\n","    Words = [word for word in Words if len(word) > 3]\n","\n","    indices = np.unique(Words, return_index=True)[1]\n","    cleaned_text = np.array(Words)[np.sort(indices)].tolist()\n","\n","    return cleaned_text"],"metadata":{"id":"X_3oEKNAgbHH"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["!pip install nltk\n","import nltk\n","nltk.download('punkt')\n","nltk.download('stopwords')\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"XbWUJfqDgynk","executionInfo":{"status":"ok","timestamp":1719539143655,"user_tz":-420,"elapsed":5338,"user":{"displayName":"Hiếu Nguyễn","userId":"17745828449678178838"}},"outputId":"4947c214-e573-4dac-dda3-9624b3484f9c"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Requirement already satisfied: nltk in /usr/local/lib/python3.10/dist-packages (3.8.1)\n","Requirement already satisfied: click in /usr/local/lib/python3.10/dist-packages (from nltk) (8.1.7)\n","Requirement already satisfied: joblib in /usr/local/lib/python3.10/dist-packages (from nltk) (1.4.2)\n","Requirement already satisfied: regex>=2021.8.3 in /usr/local/lib/python3.10/dist-packages (from nltk) (2024.5.15)\n","Requirement already satisfied: tqdm in /usr/local/lib/python3.10/dist-packages (from nltk) (4.66.4)\n"]},{"output_type":"stream","name":"stderr","text":["[nltk_data] Downloading package punkt to /root/nltk_data...\n","[nltk_data]   Package punkt is already up-to-date!\n","[nltk_data] Downloading package stopwords to /root/nltk_data...\n","[nltk_data]   Package stopwords is already up-to-date!\n"]},{"output_type":"execute_result","data":{"text/plain":["True"]},"metadata":{},"execution_count":25}]},{"cell_type":"code","source":["x=sentiment.drop('labels',axis=1)\n","y=sentiment.labels"],"metadata":{"id":"zS8X2jGygf0U"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["texts=list(x['text'])"],"metadata":{"id":"EJpwvTPNgh-Z"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["cleaned_text = [process_text(text) for text in texts]"],"metadata":{"id":"tMmeYXJbgjz4"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["print(cleaned_text[:10])\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Ua5nUJw2hVSh","executionInfo":{"status":"ok","timestamp":1719539195518,"user_tz":-420,"elapsed":536,"user":{"displayName":"Hiếu Nguyễn","userId":"17745828449678178838"}},"outputId":"6696f2cf-d0b9-4ef6-c715-65a900178428"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[['coming', 'border', 'kill'], ['getting', 'borderland', 'kill'], ['coming', 'borderland', 'murder'], ['getting', 'borderland', 'murder'], ['getting', 'borderland', 'murder'], ['spent', 'hour', 'making', 'something', 'know', 'huge', 'borderland', 'maya', 'favorite', 'character', 'decided', 'make', 'wallpaper', 'original', 'image', 'versus', 'creation', 'made', 'enjoy', 'twitter', 'mlsiwfjg'], ['spent', 'couple', 'hour', 'something', 'know', 'huge', 'borderland', 'maya', 'favorite', 'character', 'decided', 'make', 'wallpaper', 'original', 'picture', 'compared', 'creation', 'made', 'twitter', 'mlsiwfjg'], ['spent', 'hour', 'something', 'know', 'huge', 'borderland', 'maya', 'favorite', 'character'], ['spent', 'hour', 'making', 'something', 'know', 'huge', 'rhandlerr', 'maya', 'favorite', 'character', 'decided', 'make', 'wallpaper', 'original', 'image', 'versus', 'creation', 'made', 'enjoy', 'twitter', 'mlsiwfjg'], ['spent', 'hour', 'making', 'something', 'know', 'huge', 'rhandlerr', 'maya', 'favorite', 'character', 'decided', 'make', 'wallpaper', 'original', 'image', 'versus', 'creation', 'made', 'enjoy', 'twitter', 'mlsiwfjg']]\n"]}]},{"cell_type":"code","source":["from sklearn.model_selection import train_test_split\n","X_train, X_test, y_train, y_test = train_test_split(cleaned_text, y, test_size=0.2, random_state=42)"],"metadata":{"id":"hhzF8lT8hdnq"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# Prepare the data to the model"],"metadata":{"id":"vdOlnregjS8v"}},{"cell_type":"code","source":["from tensorflow.keras.preprocessing.text import Tokenizer\n","from tensorflow.keras.preprocessing.sequence import pad_sequences\n","\n","max_vocab = 20000\n","tokenizer = Tokenizer(num_words=max_vocab)\n","tokenizer.fit_on_texts(X_train)\n","word_idx = tokenizer.word_index  # Corrected syntax for accessing word index\n","v = len(word_idx)\n","print(\"the size of vocab =\", v)  # Corrected spacing\n","X_train = tokenizer.texts_to_sequences(X_train)\n","X_test = tokenizer.texts_to_sequences(X_test)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"srVDgf2chlqr","executionInfo":{"status":"ok","timestamp":1719539242456,"user_tz":-420,"elapsed":4233,"user":{"displayName":"Hiếu Nguyễn","userId":"17745828449678178838"}},"outputId":"a100b4c9-fb5f-47bf-c294-a06f05df918a"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["the size of vocab = 24048\n"]}]},{"cell_type":"code","source":["df = train_df.sample(frac=0.1)\n","df.reset_index(drop=True, inplace=True)"],"metadata":{"id":"zeiNVXvBpNJb"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#Checking balance of target classes\n","sentiments = list(df[\"Sentiment\"].unique())\n","\n","sentiment_nums = [len(df[df[\"Sentiment\"] == sentiment]) / len(df) for sentiment in sentiments]\n","\n","plt.bar(sentiments, sentiment_nums)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":447},"id":"exXFhhV4qJVf","executionInfo":{"status":"ok","timestamp":1719541484728,"user_tz":-420,"elapsed":678,"user":{"displayName":"Hiếu Nguyễn","userId":"17745828449678178838"}},"outputId":"da4fe5ef-746c-4d8c-ade5-e62616492c44"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<BarContainer object of 4 artists>"]},"metadata":{},"execution_count":54},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["from tensorflow.keras.preprocessing.sequence import pad_sequences\n","\n","maxlen = 100\n","X_train = pad_sequences(X_train,maxlen=maxlen)\n","X_test = pad_sequences(X_test,maxlen=maxlen)"],"metadata":{"id":"pRTHhM9IhoK4"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["y.value_counts()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"YpBiNJL6hsWx","executionInfo":{"status":"ok","timestamp":1719539265833,"user_tz":-420,"elapsed":428,"user":{"displayName":"Hiếu Nguyễn","userId":"17745828449678178838"}},"outputId":"1dc090fa-5894-4c72-e2b4-4f66bfc5362f"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["labels\n","Negative      21329\n","Positive      19270\n","Neutral       17281\n","Irrelevant    12371\n","Name: count, dtype: int64"]},"metadata":{},"execution_count":31}]},{"cell_type":"markdown","source":["# Build the model"],"metadata":{"id":"N7akxEcXja7L"}},{"cell_type":"code","source":["from keras.models import Sequential\n","from keras.layers import Embedding, LSTM, Dense,Input,GlobalMaxPooling1D,Dropout,Bidirectional\n","from tensorflow.keras.models import Model\n","from keras import optimizers\n","import numpy as np\n","D=100\n","inputt=Input(shape=(maxlen,))"],"metadata":{"id":"s3V6kZDkhuzB"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["from tensorflow.keras.optimizers import Adam\n","learning_rate = 0.0001  # Set your desired learning rate here\n","x=Embedding(v+1,D)(inputt)\n","x = Dropout(0.5)(x)\n","x = Bidirectional(LSTM(150))(x)\n","x = Dense(32, activation='relu')(x)\n","x = Dense(4, activation='softmax')(x)\n","\n","model = Model(inputt, x)\n","\n","# Define optimizer with specified learning rate\n","optimizer = Adam(learning_rate=learning_rate)\n","\n","model.compile(optimizer=optimizer, loss='categorical_crossentropy', metrics=['accuracy'])"],"metadata":{"id":"t00KFC3rhxEV"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["from sklearn.preprocessing import LabelEncoder\n","\n","label_encoder = LabelEncoder()\n","y_train_encoded = label_encoder.fit_transform(y_train)\n","y_test_encoded = label_encoder.transform(y_test)"],"metadata":{"id":"-t0Nm4W1h0dL"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import tensorflow as tf\n","\n","y_train_one_hot = tf.keras.utils.to_categorical(y_train_encoded)\n","y_test_one_hot = tf.keras.utils.to_categorical(y_test_encoded)\n","history = model.fit(X_train, y_train_one_hot, epochs=40, validation_data=(X_test, y_test_one_hot))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"lHK1T47Kh6fx","executionInfo":{"status":"ok","timestamp":1719540394360,"user_tz":-420,"elapsed":1043075,"user":{"displayName":"Hiếu Nguyễn","userId":"17745828449678178838"}},"outputId":"fa6ddb56-eb1e-450d-a7f7-9fb733911470"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/40\n","1757/1757 [==============================] - 64s 33ms/step - loss: 1.2280 - accuracy: 0.4391 - val_loss: 1.0264 - val_accuracy: 0.5832\n","Epoch 2/40\n","1757/1757 [==============================] - 27s 15ms/step - loss: 0.9439 - accuracy: 0.6160 - val_loss: 0.8743 - val_accuracy: 0.6533\n","Epoch 3/40\n","1757/1757 [==============================] - 25s 14ms/step - loss: 0.7823 - accuracy: 0.6920 - val_loss: 0.7521 - val_accuracy: 0.7192\n","Epoch 4/40\n","1757/1757 [==============================] - 26s 15ms/step - loss: 0.6368 - accuracy: 0.7594 - val_loss: 0.6454 - val_accuracy: 0.7627\n","Epoch 5/40\n","1757/1757 [==============================] - 28s 16ms/step - loss: 0.5333 - accuracy: 0.8020 - val_loss: 0.5558 - val_accuracy: 0.7951\n","Epoch 6/40\n","1757/1757 [==============================] - 27s 15ms/step - loss: 0.4594 - accuracy: 0.8295 - val_loss: 0.5132 - val_accuracy: 0.8077\n","Epoch 7/40\n","1757/1757 [==============================] - 25s 14ms/step - loss: 0.4147 - accuracy: 0.8449 - val_loss: 0.4744 - val_accuracy: 0.8251\n","Epoch 8/40\n","1757/1757 [==============================] - 26s 15ms/step - loss: 0.3753 - accuracy: 0.8587 - val_loss: 0.4495 - val_accuracy: 0.8321\n","Epoch 9/40\n","1757/1757 [==============================] - 25s 14ms/step - loss: 0.3446 - accuracy: 0.8702 - val_loss: 0.4266 - val_accuracy: 0.8416\n","Epoch 10/40\n","1757/1757 [==============================] - 30s 17ms/step - loss: 0.3178 - accuracy: 0.8794 - val_loss: 0.4115 - val_accuracy: 0.8474\n","Epoch 11/40\n","1757/1757 [==============================] - 27s 15ms/step - loss: 0.2996 - accuracy: 0.8870 - val_loss: 0.4047 - val_accuracy: 0.8494\n","Epoch 12/40\n","1757/1757 [==============================] - 27s 15ms/step - loss: 0.2825 - accuracy: 0.8929 - val_loss: 0.3896 - val_accuracy: 0.8571\n","Epoch 13/40\n","1757/1757 [==============================] - 28s 16ms/step - loss: 0.2674 - accuracy: 0.8984 - val_loss: 0.3797 - val_accuracy: 0.8592\n","Epoch 14/40\n","1757/1757 [==============================] - 26s 15ms/step - loss: 0.2554 - accuracy: 0.9026 - val_loss: 0.3780 - val_accuracy: 0.8616\n","Epoch 15/40\n","1757/1757 [==============================] - 25s 14ms/step - loss: 0.2423 - accuracy: 0.9071 - val_loss: 0.3845 - val_accuracy: 0.8594\n","Epoch 16/40\n","1757/1757 [==============================] - 24s 14ms/step - loss: 0.2321 - accuracy: 0.9106 - val_loss: 0.3652 - val_accuracy: 0.8693\n","Epoch 17/40\n","1757/1757 [==============================] - 25s 14ms/step - loss: 0.2248 - accuracy: 0.9133 - val_loss: 0.3653 - val_accuracy: 0.8700\n","Epoch 18/40\n","1757/1757 [==============================] - 24s 14ms/step - loss: 0.2147 - accuracy: 0.9177 - val_loss: 0.3629 - val_accuracy: 0.8693\n","Epoch 19/40\n","1757/1757 [==============================] - 25s 14ms/step - loss: 0.2088 - accuracy: 0.9194 - val_loss: 0.3610 - val_accuracy: 0.8726\n","Epoch 20/40\n","1757/1757 [==============================] - 24s 14ms/step - loss: 0.2015 - accuracy: 0.9216 - val_loss: 0.3688 - val_accuracy: 0.8735\n","Epoch 21/40\n","1757/1757 [==============================] - 26s 15ms/step - loss: 0.1943 - accuracy: 0.9249 - val_loss: 0.3594 - val_accuracy: 0.8763\n","Epoch 22/40\n","1757/1757 [==============================] - 25s 14ms/step - loss: 0.1884 - accuracy: 0.9277 - val_loss: 0.3673 - val_accuracy: 0.8730\n","Epoch 23/40\n","1757/1757 [==============================] - 24s 14ms/step - loss: 0.1827 - accuracy: 0.9294 - val_loss: 0.3643 - val_accuracy: 0.8767\n","Epoch 24/40\n","1757/1757 [==============================] - 24s 14ms/step - loss: 0.1814 - accuracy: 0.9300 - val_loss: 0.3690 - val_accuracy: 0.8757\n","Epoch 25/40\n","1757/1757 [==============================] - 24s 14ms/step - loss: 0.1730 - accuracy: 0.9331 - val_loss: 0.3773 - val_accuracy: 0.8765\n","Epoch 26/40\n","1757/1757 [==============================] - 24s 14ms/step - loss: 0.1702 - accuracy: 0.9340 - val_loss: 0.3695 - val_accuracy: 0.8803\n","Epoch 27/40\n","1757/1757 [==============================] - 24s 14ms/step - loss: 0.1672 - accuracy: 0.9346 - val_loss: 0.3675 - val_accuracy: 0.8797\n","Epoch 28/40\n","1757/1757 [==============================] - 24s 14ms/step - loss: 0.1616 - accuracy: 0.9368 - val_loss: 0.3756 - val_accuracy: 0.8809\n","Epoch 29/40\n","1757/1757 [==============================] - 24s 14ms/step - loss: 0.1590 - accuracy: 0.9386 - val_loss: 0.3776 - val_accuracy: 0.8806\n","Epoch 30/40\n","1757/1757 [==============================] - 25s 14ms/step - loss: 0.1562 - accuracy: 0.9389 - val_loss: 0.3782 - val_accuracy: 0.8809\n","Epoch 31/40\n","1757/1757 [==============================] - 24s 14ms/step - loss: 0.1532 - accuracy: 0.9398 - val_loss: 0.3793 - val_accuracy: 0.8845\n","Epoch 32/40\n","1757/1757 [==============================] - 24s 14ms/step - loss: 0.1513 - accuracy: 0.9419 - val_loss: 0.3767 - val_accuracy: 0.8832\n","Epoch 33/40\n","1757/1757 [==============================] - 24s 14ms/step - loss: 0.1487 - accuracy: 0.9418 - val_loss: 0.3773 - val_accuracy: 0.8870\n","Epoch 34/40\n","1757/1757 [==============================] - 24s 14ms/step - loss: 0.1455 - accuracy: 0.9441 - val_loss: 0.3854 - val_accuracy: 0.8847\n","Epoch 35/40\n","1757/1757 [==============================] - 24s 14ms/step - loss: 0.1424 - accuracy: 0.9450 - val_loss: 0.3830 - val_accuracy: 0.8858\n","Epoch 36/40\n","1757/1757 [==============================] - 24s 13ms/step - loss: 0.1422 - accuracy: 0.9446 - val_loss: 0.3862 - val_accuracy: 0.8861\n","Epoch 37/40\n","1757/1757 [==============================] - 24s 13ms/step - loss: 0.1394 - accuracy: 0.9470 - val_loss: 0.3910 - val_accuracy: 0.8859\n","Epoch 38/40\n","1757/1757 [==============================] - 24s 14ms/step - loss: 0.1372 - accuracy: 0.9465 - val_loss: 0.3973 - val_accuracy: 0.8847\n","Epoch 39/40\n","1757/1757 [==============================] - 25s 14ms/step - loss: 0.1352 - accuracy: 0.9463 - val_loss: 0.3920 - val_accuracy: 0.8861\n","Epoch 40/40\n","1757/1757 [==============================] - 24s 14ms/step - loss: 0.1320 - accuracy: 0.9487 - val_loss: 0.3950 - val_accuracy: 0.8855\n"]}]},{"cell_type":"code","source":["# Vẽ biểu đồ độ chính xác và hàm mất mát theo chiều ngang\n","fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(14, 5))\n","\n","# Biểu đồ độ chính xác\n","ax1.plot(history.history['accuracy'])\n","ax1.plot(history.history['val_accuracy'])\n","ax1.set_title('Model accuracy')\n","ax1.set_xlabel('Epoch')\n","ax1.set_ylabel('Accuracy')\n","ax1.legend(['Train', 'Test'], loc='upper left')\n","\n","# Biểu đồ hàm mất mát\n","ax2.plot(history.history['loss'])\n","ax2.plot(history.history['val_loss'])\n","ax2.set_title('Model loss')\n","ax2.set_xlabel('Epoch')\n","ax2.set_ylabel('Loss')\n","ax2.legend(['Train', 'Test'], loc='upper left')\n","\n","plt.tight_layout()\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":507},"id":"vgauwz56iDxq","executionInfo":{"status":"ok","timestamp":1719540904891,"user_tz":-420,"elapsed":1383,"user":{"displayName":"Hiếu Nguyễn","userId":"17745828449678178838"}},"outputId":"bc5fa260-968b-46f3-e035-d1b4b565c02b"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1400x500 with 2 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["# Evaluate the model on the test data\n","loss, accuracy = model.evaluate(X_test, y_test_one_hot)\n","\n","print(\"Test Loss:\", loss)\n","print(\"Test Accuracy:\", accuracy)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"FZaIpv6kniCo","executionInfo":{"status":"ok","timestamp":1719540983603,"user_tz":-420,"elapsed":5832,"user":{"displayName":"Hiếu Nguyễn","userId":"17745828449678178838"}},"outputId":"0a6c7272-0aba-4465-cc77-957c8cd87759"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["440/440 [==============================] - 4s 8ms/step - loss: 0.3950 - accuracy: 0.8855\n","Test Loss: 0.39504489302635193\n","Test Accuracy: 0.8854885697364807\n"]}]},{"cell_type":"code","source":["import matplotlib.pyplot as plt\n","import seaborn as sns\n","from sklearn.metrics import confusion_matrix\n","import numpy as np\n","\n","\n","y_pred_probs = model.predict(X_test)\n","y_pred_labels = np.argmax(y_pred_probs, axis=1)\n","y_true_labels = np.argmax(y_test_one_hot, axis=1)\n","conf_matrix = confusion_matrix(y_true_labels, y_pred_labels)\n","plt.figure(figsize=(8, 6))\n","sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues',\n","            xticklabels=['Class 0', 'Class 1', 'Class 2', 'Class 3'],\n","            yticklabels=['Class 0', 'Class 1', 'Class 2', 'Class 3'])\n","plt.xlabel('Predicted')\n","plt.ylabel('True')\n","plt.title('Confusion Matrix')\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":581},"id":"291XSmkHoQ2i","executionInfo":{"status":"ok","timestamp":1719541047207,"user_tz":-420,"elapsed":3479,"user":{"displayName":"Hiếu Nguyễn","userId":"17745828449678178838"}},"outputId":"5455cdc6-8899-4001-d8e2-6bd48e28dd71"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["440/440 [==============================] - 2s 5ms/step\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 800x600 with 2 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":[],"metadata":{"id":"A7-SPQP3oVKn"},"execution_count":null,"outputs":[]}]}